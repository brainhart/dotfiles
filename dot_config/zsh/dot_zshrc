#!/bin/zsh


# ------------------------------------------------------------------------------
# -------------------------------------path-------------------------------------
# ------------------------------------------------------------------------------
export CODE="${HOME}/code"


# ------------------------------------------------------------------------------
# -----------------------------------plugins------------------------------------
# ------------------------------------------------------------------------------

_antidote_dir=${ZDOTDIR:-~}/.antidote
if [[ ! -d $_antidote_dir ]]; then
	git clone --depth=1 https://github.com/mattmc3/antidote.git $_antidote_dir
fi
source $_antidote_dir/antidote.zsh
antidote load

eval "$(starship init zsh)"
eval "$(zoxide init zsh)"

# https://github.com/jeffreytse/zsh-vi-mode#execute-extra-commands
# function zvm_after_init() {
# 	[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
# }

#-------------------------------------------------------------------------------
#-------------------------------settings and path-------------------------------
#-------------------------------------------------------------------------------

export TERM=xterm-256color
export CLICOLOR=1
export LS_COLORS='di=0;35'

set bell-style none

# History
HISTSIZE=5000
HISTFILE="$XDG_CACHE_HOME"/zsh/.zsh_history
SAVEHIST=5000
setopt appendhistory
setopt sharehistory
setopt incappendhistory

export RIPGREP_CONFIG_PATH="$XDG_CONFIG_HOME"/ripgrep/ripgreprc



alias j="just"
alias .j="just --justfile $XDG_CONFIG_HOME/just/justfile --working-directory ."
alias uvx="uv tool run"

# ------------------------------------------------------------------------------
# -------------------------------------fzf--------------------------------------
# ------------------------------------------------------------------------------

export FZF_DEFAULT_COMMAND='fd --type f'

# Use ~~ as the trigger sequence instead of the default **
export FZF_COMPLETION_TRIGGER='~~'

# Options to fzf command
export FZF_COMPLETION_OPTS='--border --info=inline'

# Use fd (https://github.com/sharkdp/fd) instead of the default find
# command for listing path candidates.
# - The first argument to the function ($1) is the base path to start traversal
# - See the source code (completion.{bash,zsh}) for the details.
_fzf_compgen_path() {
  fd --hidden --follow --exclude ".git" . "$1"
}

# Use fd to generate the list for directory completion
_fzf_compgen_dir() {
  fd --type d --hidden --follow --exclude ".git" . "$1"
}

# (EXPERIMENTAL) Advanced customization of fzf options via _fzf_comprun function
# - The first argument to the function is the name of the command.
# - You should make sure to pass the rest of the arguments to fzf.
_fzf_comprun() {
  local command=$1
  shift

  case "$command" in
    cd)           fzf "$@" --preview 'tree -C {} | head -200' ;;
    export|unset) fzf "$@" --preview "eval 'echo \$'{}" ;;
    ssh)          fzf "$@" --preview 'dig {}' ;;
    *)            fzf "$@" ;;
  esac
}

function f() {
	fd --type file | fzf --border --preview 'bat --style=numbers --color=always --line-range :500 {}' "$@"
}


# FZF search files to open in vim
function vf() {
	FILE=$(f)
	if [ ! -z $FILE ]; then
		nvim "$@" "$FILE"
	fi
}

function fcd() {
	DIR=$(fd --type directory . | fzf --border --preview 'tree {}')
	if [ ! -z $DIR ]; then
		cd "$DIR"
	fi
}

# ------------------------------------------------------------------------------
# -------------------------------------git--------------------------------------
# ------------------------------------------------------------------------------

alias g='gt'

alias gs='git status -sb'

alias gd='git diff'
alias gdh='git diff HEAD'

alias gl='git log'

alias ga='git add'
alias gaa='git add -A'

function is_in_graphite_repo() {
  [ -f "$(git rev-parse --git-dir 2>/dev/null)/.graphite_repo_config" ]
}

function gca() {
  if is_in_graphite_repo; then 
    gt modify --edit
  else 
    git commit --amend
  fi
}

function gcan() {
  if is_in_graphite_repo; then 
    gt modify
  else 
    git commit --amend --no-edit
  fi
}

function gcm() {
  if is_in_graphite_repo; then 
    gt modify -c -m $@
  else 
    git commit -m $@
  fi
}

alias gps='git push -u'
alias gpsf='git push --force'

alias gcd='cd $(git rev-parse --show-toplevel)'

alias precommit-rerun='pre-commit run --from-ref $(gt parent) --to-ref HEAD'

function is_in_gt_repo() {
	git rev-parse HEAD >/dev/null 2>&1
}

function gb() {
	is_in_gt_repo || return
	git for-each-ref refs/heads --format='%(refname:short)' |
		fzf --height 50% --border --ansi --multi --tac --preview-window right:70% \
			--preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" {} | head -200'
}

function gnb() {
	DATE=$(date '+%Y-%m-%d')
	BRANCH_NAME="brian/$DATE/$@"
	gt branch create "$BRANCH_NAME"
}

function co() {
	git checkout $(gb)
}

function gbd() {
	gt branch -D $(gb)
}

function gfpr() {
	is_in_gt_repo || return
	gt fetch origin pull/$1/head && gt checkout -q FETCH_HEAD
}

function delete_current_branch() {
	is_in_gt_repo || return
	refname=$(gt rev-parse --abbrev-ref HEAD)
	gt checkout master
	gt update-ref -d $refname
}

# ------------------------------------------------------------------------------
# -------------------------------------misc-------------------------------------
# ------------------------------------------------------------------------------

alias ez="chezmoi edit $XDG_CONFIG_HOME/zsh/.zshrc"
alias sz="source $XDG_CONFIG_HOME/zsh/.zshrc"

alias ..="cd .."
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias ......='cd ../../../../..'
alias l='exa'
alias ll='exa -l --header'
alias lo='exa -l --sort=old --header'
alias la='exa -la --header'
alias lf='exa --header -d */'
alias lt='exa -T'

# Tmux
alias tmux='tmux -2'
alias tls='tmux ls'
alias tks='tmux kill-session -t'
alias tkill='tmux kill-server'
alias ta='tmux attach'

# Dotfiles Edit
alias dedit='chezmoi edit'

# Remember: (zsh is 1 indexed)
# Code grep which matches for the text in all sane cases.
function crg() {
	local word=$1
	cases=("Camel" "Pascal" "Snake" "UpperSnake" "Kebab")

	arraylength=${#cases[@]}

	local c="${cases[1]}"
	searchStr=$(ccase -t $c $word)

	for ((i = 2; i <= arraylength; i++)); do
		local c="${cases[$i]}"
		local conv=$(ccase -t $c $word)
		searchStr="$searchStr|$conv"
	done

	(
		shift 1
		rg $searchStr "$@"
	)
}

#-------------------------------------------------------------------------------
#-------------------------------------pyenv-------------------------------------
#-------------------------------------------------------------------------------


function list_port_processes() {
  # https://x.com/seldo/status/1823126087423099192
  sudo lsof -iTCP -sTCP:LISTEN -n -P | awk 'NR>1 {print $9, $1, $2}' | sed 's/.*://' | while read port process pid; do echo "Port $port: $(ps -p $pid -o command= | sed 's/^-//') (PID: $pid)"; done | sort -n | uniq
}

# ------------------------------------------------------------------------------
# ------------------------------------local-------------------------------------
# ------------------------------------------------------------------------------

local_conf="$HOME/local_bin/local_conf.sh"
test -f "$local_conf" && source "$local_conf"
