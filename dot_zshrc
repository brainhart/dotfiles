#!/bin/zsh

#-------------------------------------------------------------------------------
#-------------------------------settings and path-------------------------------
#-------------------------------------------------------------------------------

export TERM=xterm-256color
export CLICOLOR=1
export LS_COLORS='di=0;35'

gruvbox_colors="$HOME/dotfiles/nvim/plugged/gruvbox/gruvbox_256palette_osx.sh"
test -f "$gruvbox_colors" && source $gruvbox_colors

export EDITOR='nvim'
export CODE="${HOME}/code/source"

PATH="$HOME/bin:$PATH"
PATH="$HOME/.local/bin:$PATH"
PATH="$HOME/local_bin:$PATH"

# Go installs packages here
export GOPATH="$HOME"/go
export GOBIN="$GOPATH"/bin
export PATH="$GOBIN":"$PATH"
export GO111MODULE=on

export PATH=/usr/local/opt/postgresql@11/bin:"$PATH"
export PATH="$(antibody path bigH/git-fuzzy)"/bin:$PATH

set bell-style none

# History
HISTSIZE=5000
HISTFILE="$HOME"/.zsh_history
SAVEHIST=5000
setopt appendhistory
setopt sharehistory
setopt incappendhistory

RIPGREP_CONFIG_PATH="$HOME"/.ripgreprc


# ------------------------------------------------------------------------------
# -----------------------------------plugins------------------------------------
# ------------------------------------------------------------------------------

source ~/.zsh_plugins.sh


# ------------------------------------------------------------------------------
# ------------------------------------prompt------------------------------------
# ------------------------------------------------------------------------------

autoload -Uz vcs_info
precmd_vcs_info() { vcs_info }
precmd_functions+=( precmd_vcs_info )

setopt prompt_subst
zstyle ':vcs_info:git:*' formats '%F{green}  %b'
zstyle ':vcs_info:*' enable git

export PYENV_VIRTUALENV_DISABLE_PROMPT=1

if (($+TECTONCTL_PS1_PREFIX)); then
	TECTONCTL_PREFIX="${TECTONCTL_PS1_PREFIX} "
else
	TECTONCTL_PREFIX=""
fi
_newline=$'\n'
_lineup=$'\e[1A'
_linedown=$'\e[1B'

PROMPT="${_newline}%F{blue}${TECTONCTL_PREFIX}%n %f%B%F{green} %~%f%b\$vcs_info_msg_0_${_newline}%(?..%F{red} )%F{green}>> "
RPROMPT=%{${_lineup}%}'%F{yellow}%T%f'%{${_linedown}%}



# ------------------------------------------------------------------------------
# -------------------------------------fzf--------------------------------------
# ------------------------------------------------------------------------------

export FZF_DEFAULT_COMMAND='fd . '
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_ALT_C_COMMAND="fd -t d ."
export FZF_CTRL_R_OPTS="--preview 'echo {}' --preview-window down:3:hidden:wrap --bind '?:toggle-preview' --bind 'ctrl-y:execute-silent(echo -n {2..} | pbcopy)+abort' --header 'Press CTRL-Y to copy command into clipboard' --border"

# https://github.com/jeffreytse/zsh-vi-mode#execute-extra-commands
zvm_after_init_commands+=('[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh')

function f () {
fzf \
	--border \
	--preview '[[ $(file --mime {}) =~ binary ]] && echo {} is a binary file \
	|| (highlight -O ansi -l {} || coderay {} || rougify {} || cat {}) 2> \
	/dev/null | head -500' \
	"$@"
}

# FZF search files to open in vim
function vf() {
	nvim "$@" $(f -m)
}

function fzf-down() {
	fzf --height 50% "$@" --border
}


# ------------------------------------------------------------------------------
# -------------------------------------git--------------------------------------
# ------------------------------------------------------------------------------


alias g='git'

alias gs='git status -sb'

alias gd='git diff'
alias gdh='git diff HEAD'

alias gl='git log'

alias ga='git add'
alias gaa='git add -A'

alias gc='git commit'
alias gca='git commit --amend'
alias gcan='git commit --amend --no-edit'
alias gcm='git commit -m'

alias gps='git push -u'
alias gpsf='git push --force'

alias gr='git rebase'
alias grm='git rebase master'
alias grim='git rebase -i master'

alias gcd='cd $(git rev-parse --show-toplevel)'

gg() {
	git checkout -q master
	git fetch --prune -q
	git rebase -q origin/master
	for branch in $(git for-each-ref --format '%(refname:short) %(upstream:track)' refs/heads | awk '$2 == "[gone]" {print $1}'); do
		git branch -D $branch
	done
}

gqrb() {
	git fetch origin "$@:$@" && git rebase "$@" --autostash
}

alias rebase='gqrb master'

gbir() {
	git rebase -i --autosquash $(git merge-base --fork-point "$@" $(git rev-parse --abbrev-ref HEAD))
}

is_in_git_repo() {
	git rev-parse HEAD > /dev/null 2>&1
}

gb() {
	is_in_git_repo || return
	git for-each-ref refs/heads  --format='%(refname:short)' |
					fzf-down --ansi --multi --tac --preview-window right:70% \
					--preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" {} | head -200'
}

gnb() {
	DATE=$(date '+%Y-%m-%d')
	BRANCH_NAME="brian/$DATE/$@"
	git checkout -b "$BRANCH_NAME"
}

co() {
	git checkout $(gb)
}

gbd() {
	git branch -D $(gb)
}

gfpr() {
	is_in_git_repo || return
	git fetch origin pull/$1/head && git checkout -q FETCH_HEAD
}

delete_current_branch () {
	is_in_git_repo || return
	refname=$(git rev-parse --abbrev-ref HEAD)
	git checkout master
	git update-ref -d $refname
}


# ------------------------------------------------------------------------------
# -------------------------------------misc-------------------------------------
# ------------------------------------------------------------------------------

alias install_zsh_plugins='antibody bundle < ~/.zsh_plugins.txt > ~/.zsh_plugins.sh'

alias ez="chezmoi edit $HOME/.zshrc"
alias sz="source $HOME/.zshrc"

alias ..="cd .."
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias ......='cd ../../../../..'
alias l='exa'
alias ll='exa -l --header'
alias lo='exa -l --sort=old --header'
alias la='exa -la --header'
alias lf='exa --header -d */'
alias lt='exa -T'


# Tmux
alias tmux='tmux -2'
alias tls='tmux ls'
alias tks='tmux kill-session -t'
alias tkill='tmux kill-server'
alias ta='tmux attach'

# Dotfiles Edit
alias dedit='chezmoi edit'

export NVM_DIR="$HOME/.nvm"
[ -s "/usr/local/opt/nvm/nvm.sh" ] && . "/usr/local/opt/nvm/nvm.sh"  # This loads nvm

#-------------------------------------------------------------------------------
#-------------------------------------pyenv-------------------------------------
#-------------------------------------------------------------------------------


function ls_venvs() {
	fd --base-directory $PYENV_ROOT/versions . -d 1 --type symlink
}

function select_venv() {
	ls_venvs | fzf --preview 'PYENV_VERSION={} pip freeze' --height 50% --border
}

function pya () {
	_VENV=$(select_venv)
	if [ ! -z $_VENV ]; then
		pyenv activate $_VENV
		echo "Activated venv: $_VENV"
	fi
}

function pymk () {
	_VENV="$1"
	pyenv virtualenv $_VENV
	pyenv activate $_VENV
}

function pymk-tmp () {
	pymk "tmp-$RANDOM"
}

function pydel () {
	_VENV=$(select_venv)
	if [ ! -z $_VENV ]; then
		pyenv virtualenv-delete -f $_VENV
		echo "Deleted venv: $_VENV"
	fi
}

function pydel-tmp () {
	fd --base-directory $PYENV_ROOT/versions 'tmp-*' -d 1 --type symlink --exec pyenv virtualenv-delete -f "{}"
}

eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"

#-------------------------------------------------------------------------------
#---------------------------------one password----------------------------------
#-------------------------------------------------------------------------------

function one_password_signin() {
	# This will first check if we have a valid session, and if not it will prompt
	# us to sign-in and export the token. Sessions last for 30m:
	# https://support.1password.com/command-line-reference/#signin
	export OP_SESSION_my=$(op signin my --session "$OP_SESSION_my" --raw)
}

function get_api_token() {
	one_password_signin
	op list items --vault work --tags "$1" | op get item - --fields api-token
}

function get_tecton_api_token() {
	one_password_signin
	op list items --vault work --tags tecton | op get item - --fields "$1"
}

function get_aws_vault_keychain() {
	one_password_signin
	op list items --vault work --tags aws | op get item - --fields aws-vault-keychain | pbcopy
}


# ------------------------------------------------------------------------------
# ------------------------------------local-------------------------------------
# ------------------------------------------------------------------------------

local_conf="$HOME/local_bin/local_conf.sh"
test -f "$local_conf" && source "$local_conf"
